import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const SUPABASE_URL = process.env.SUPABASE_URL || 'https://gojajqzajzhqkhmubpql.supabase.co';
const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY;

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function cleanInvalidData() {
    console.log('üßπ Î¨¥Ìö® Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ ÏãúÏûë...');
    
    try {
        // Î¨¥Ìö® Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú (Îß§Î¨ºÎ™ÖÏù¥ ÏóÜÍ±∞ÎÇò "Îß§Î¨ºÎ™Ö ÏóÜÏùå"Ïù∏ Í≤ÉÎì§)
        const { error, count } = await supabase
            .from('properties')
            .delete()
            .or('property_name.is.null,property_name.eq.Îß§Î¨ºÎ™Ö ÏóÜÏùå');
        
        if (error) {
            console.error('‚ùå ÏÇ≠Ï†ú Ïã§Ìå®:', error);
            return;
        }
        
        console.log(`‚úÖ Î¨¥Ìö® Îç∞Ïù¥ÌÑ∞ ${count}Í∞ú ÏÇ≠Ï†ú ÏôÑÎ£å`);
        
        // ÏµúÏ¢Ö ÌôïÏù∏
        const { count: finalCount } = await supabase
            .from('properties')
            .select('*', { count: 'exact', head: true });
        
        console.log(`üìä Ï†ïÎ¶¨ ÌõÑ Ï¥ù Îß§Î¨º Í∞úÏàò: ${finalCount}Í∞ú`);
        
        // ÏÉòÌîå ÌôïÏù∏
        const { data: samples } = await supabase
            .from('properties')
            .select('*')
            .order('created_at', { ascending: false })
            .limit(5);
        
        console.log('\nÏµúÍ∑º Îç∞Ïù¥ÌÑ∞ ÏÉòÌîå:');
        samples.forEach((item, index) => {
            console.log(`[${index + 1}] ${item.property_name} - ${item.address} - ${item.price}`);
        });
        
    } catch (error) {
        console.error('‚ùå Ï†ïÎ¶¨ Ï§ë Ïò§Î•ò:', error);
    }
}

cleanInvalidData();